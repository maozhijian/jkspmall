// Generated by CoffeeScript 1.6.1
var app_root, build, colors, exec, fs, path, project_dir, util_dir;

colors = require("/usr/local/lib/node_modules/colors");

fs = require("fs");

path = require("path");

exec = require("child_process").exec;

project_dir = path.resolve("./", "../");

app_root = fs.readFileSync("" + project_dir + "/tool/.app_root", "utf8");

app_root = app_root.replace("\n", "");

build = function(path, name, version) {
  return exec("cd " + path + " && spm build && cp ./dist/" + name + ".js ./", function(err, stdout, stderr) {
    if (err !== null) {
      console.log("ERROR".red.inverse + "build the " + ("" + name + "." + version).red.underline + " failed!");
      return false;
    }
    return console.log(stdout);
  });
};

util_dir = "" + project_dir + "/vendor/Zonda/util";

fs.writeFileSync("" + project_dir + "/vendor/Zonda/util/package.json", "{\n  \"name\": \"util\",\n  \"root\": \"" + app_root + "/vendor/Zonda\",\n  \"output\": {\n    \"util.js\": \".\"\n  }\n}");

build(util_dir, "Util", "Zonda Util package");

module.exports = function(name, version, app_root) {
  var module_dir, spm_build_config;
  module_dir = path.resolve("" + project_dir + "/vendor/Zonda/vendor/" + name + "/" + version);
  console.log("Update the vendor: " + ("" + name + "/" + version).green);
  if (fs.existsSync("" + module_dir + "/package.json")) {
    spm_build_config = "{\n  \"name\": \"" + name + "\",\n  \"root\": \"" + app_root + "/vendor/Zonda/vendor\",\n  \"version\": \"" + version + "\",\n  \"output\": {\n    \"" + name + ".js\": \".\"\n  }\n}";
    fs.writeFileSync("" + project_dir + "/vendor/Zonda/vendor/" + name + "/" + version + "/package.json", spm_build_config);
    console.log("Generate the package.json for " + ("" + name + "." + version).green.underline + "\n");
    return exec("cd " + module_dir + " && spm build && cp ./dist/" + name + ".js ./", function(err, stdout, stderr) {
      if (err !== null) {
        console.log("ERROR".red.inverse + "build the " + ("" + name + "." + version).red.underline + " failed!");
        return false;
      }
      return console.log(stdout);
    });
  } else {
    return console.log("WAR".inverse.red + (" vendor " + name).underline + " has no " + "package.json".yellow);
  }
};
